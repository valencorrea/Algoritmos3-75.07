TestCase subclass: #AlgoFixCatedraTest	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Tests'!!AlgoFixCatedraTest methodsFor: 'running' stamp: 'tomas 5/12/2020 16:14'!setUp	precision := 0.001! !!AlgoFixCatedraTest methodsFor: 'tests' stamp: 'tomas 5/12/2020 17:23'!test05PresupuestoPinteoresConPincelRodilloOfreceElMenorPresupuesto	| algoFix alba presupuesto valorEsperado |	algoFix := AlgoFix new.	"Tecnica pincel: 		- Se tarda '2' horas en pintar un M2 (metro cuadrado), 	"	"Tecnica rodillo:		- Se tarda '1' horas en pintar un M2, 	"	"Consumo de material:		- Para pincel cada M2 lleva '4' litros de pintura		- Para rodillo cada M2 lleval '5 litros de pintura 	"	"Pinturas:		- Alba   requiere '1' mano  con pincel y '1' mano rodillo	"	algoFix registrarPintorDePincel: 'Pablo' conValorHora: 500.	algoFix registrarPintorDeRodillo: 'Edson' conValorHora: 800.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 340 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 20 conPintura: alba.	valorEsperado := algoFix 		manoDeObra: 			(20 "M2" * 2 "horas" * 500 "Precio" * 1 "manos") 		masMateriales: 			(20 "M2" * 4 "litros" * 340 "Precio" * 1 "manos").	self assert: 'Pablo' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixCatedraTest methodsFor: 'tests' stamp: 'tomas 5/12/2020 17:24'!test07PresupuestoPinteoresConPincelUtilizanDiferentesPinturasHacenDescuendoDel50PorcientoEnMoCuandoM2EsMayor40EntoncesOfreceElMenorPresupuesto	| algoFix venier presupuesto valorEsperadoConAlba |	algoFix := AlgoFix new.	"Tecnica pincel: 		- Se tarda '2' horas en pintar un M2 (metro cuadrado), 	"	"Tecnica rodillo:		- Se tarda '1' horas en pintar un M2, 	"	"Consumo de material:		- Para pincel cada M2 lleva '4' litros de pintura		- Para rodillo cada M2 lleval '5 litros de pintura 	"	"Pinturas:		- Alba   requiere '1' mano  con pincel y '1' mano rodillo		- Venier requiere '2' manos con pincel y '1' con rodillo	"	algoFix registrarPintorDePincel: 'Pablo' conValorHora: 500.	algoFix registrarPintorDePincel: 'Eugenio' conValorHora: 600.	algoFix registrarPintorDeRodillo: 'Tomas' conValorHora: 4000.	venier := algoFix crearPintura: 'Venier' conPrecioPorLitro: 150 manosPincel: 2 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 55 conPintura: venier.		"El descuento del %50 lo hacen los pintores con pincel!!"	valorEsperadoConAlba := algoFix  		manoDeObra: 			(55 "M2" * 2 "horas" * 500 "Precio" * 2 "manos" * 0.5) 		masMateriales: 			(55 "M2" * 4 "litros" * 150 "Precio" * 2 "manos").	self assert: 'Pablo' equals: (presupuesto responsable).	self assert: valorEsperadoConAlba closeTo: (presupuesto valor) precision: precision.! !!AlgoFixCatedraTest methodsFor: 'tests' stamp: 'tomas 5/12/2020 17:20'!test03PresupuestoPintorUtilizaRodilloConPinturaAlbaOfreceElMenorPresupuesto	| algoFix alba presupuesto valorEsperado |	algoFix := AlgoFix new.	"Tecnica rodillo:		- Se tarda '1' horas en pintar un M2, 	"	"Consumo de material:		- Para rodillo cada M2 lleval '5 litros de pintura 	"	"Pinturas:		- Alba   requiere '1' mano  con pincel y '1' mano rodillo	"	algoFix registrarPintorDeRodillo: 'Diego' conValorHora: 200.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix  		manoDeObra: 			(5 "M2" * 1 "horas" * 200 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 5 "litros" * 200 "Precio" * 1 "manos").	self assert: 'Diego' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixCatedraTest methodsFor: 'tests' stamp: 'Val 5/21/2020 06:38'!test06PresupuestoPinteoresConPincelUtilizanDiferentesPinturasOfreceElMenorPresupuesto	| algoFix venier presupuesto valorEsperadoConVenier |	algoFix := AlgoFix new.	"Tecnica pincel: 		- Se tarda '2' horas en pintar un M2 (metro cuadrado), 	"	"Tecnica rodillo:		- Se tarda '1' horas en pintar un M2, 	"	"Consumo de material:		- Para pincel cada M2 lleva '4' litros de pintura		- Para rodillo cada M2 lleval '5 litros de pintura 	"	"Pinturas:		- Alba   requiere '1' mano  con pincel y '1' mano rodillo		- Venier requiere '2' manos con pincel y '1' con rodillo	"	algoFix registrarPintorDePincel: 'Martin' conValorHora: 500.	algoFix registrarPintorDePincel: 'Sebastian' conValorHora: 600.	venier := algoFix crearPintura: 'Venier' conPrecioPorLitro: 150 manosPincel: 2 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 15 conPintura: venier.		valorEsperadoConVenier := algoFix 		manoDeObra: 			(15 "M2" * 2 "horas" * 500 "Precio" * 2 "manos") 		masMateriales: 			(15 "M2" * 4 "litros" * 150 "Precio" * 2 "manos").	self assert: 'Martin' equals: (presupuesto responsable).	self assert: valorEsperadoConVenier closeTo: (presupuesto valor) precision: precision.! !!AlgoFixCatedraTest methodsFor: 'tests' stamp: 'Val 5/21/2020 06:38'!test04PresupuestoPintoresUtilizandoRodilloConPinturaAlbaOfreceElMenorPresupuesto	| algoFix alba presupuesto valorEsperado |	algoFix := AlgoFix new.	"Tecnica rodillo:		- Se tarda '1' horas en pintar un M2, 	"	"Consumo de material:		- Para rodillo cada M2 lleval '5 litros de pintura 	"	"Pinturas:		- Alba   requiere '1' mano  con pincel y '1' mano rodillo	"	algoFix registrarPintorDeRodillo: 'Diego' conValorHora: 200.	algoFix registrarPintorDeRodillo: 'Eugenio' conValorHora: 130.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 20 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix 		manoDeObra: 			(5 "M2" * 1 "horas" * 130 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 5 "litros" * 20 "Precio" * 1 "manos").	self assert: 'Eugenio' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixCatedraTest methodsFor: 'tests' stamp: 'Val 5/21/2020 06:30'!test02PresupuestoPintoresUtilizandoPincelConPinturaAlbaOfreceElMenorPresupuesto	| algoFix alba presupuesto valorEsperado |	algoFix := AlgoFix new.	"Tecnica pincel: 		- Se tarda '2' horas en pintar un M2 (metro cuadrado), 	"	"Consumo de material:		- Para pincel cada M2 lleva '4' litros de pintura	"		"Pinturas:		- Alba   requiere '1' mano  con pincel y '1' mano rodillo	"	algoFix registrarPintorDePincel: 'Diego' conValorHora: 500.	algoFix registrarPintorDePincel: 'Eugenio' conValorHora: 450.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 150 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 10 conPintura: alba.	valorEsperado := algoFix  		manoDeObra: 			(10 "M2" * 2 "horas" * 450 "Precio" * 1 "manos") 		masMateriales: 			(10 "M2" * 4 "litros" * 150 "Precio" * 1 "manos").	self assert: 'Eugenio' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixCatedraTest methodsFor: 'tests' stamp: 'Val 5/21/2020 06:37'!test01PresupuestoPintorUtilizaPincelConPinturaAlbaOfreceElMenorPresupuesto	| algoFix alba  presupuesto valorEsperado |	algoFix := AlgoFix new.	"Tecnica pincel: 		- Se tarda 2 horas en pintar un M2 (metro cuadrado), 	"	"Consumo de material:		- Para pincel cada M2 lleva 4 litros de pintura	"	"Pinturas:		- Alba   requiere '1' mano con pincel y '1' mano con rodillo	"	algoFix registrarPintorDePincel: 'Diego' conValorHora: 500.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(5 "M2" * 2 "horas" * 500 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 4 "litros" * 200 "Precio" * 1 "manos").	self assert: 'Diego' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixCatedraTest methodsFor: 'tests' stamp: 'tomas 5/12/2020 17:23'!test08PresupuestoConTecnicaPincel	| algoFix alba venier presupuesto valorEsperadoConAlba valorEsperadoConVenier |	algoFix := AlgoFix new.	"Tecnica pincel: 		- Se tarda '2' horas en pintar un M2 (metro cuadrado), 	"	"Tecnica rodillo:		- Se tarda '1' horas en pintar un M2, 	"	"Consumo de material:		- Para pincel cada M2 lleva '4' litros de pintura		- Para rodillo cada M2 lleval '5 litros de pintura 	"	"Pinturas:		- Alba   requiere '1' mano  con pincel y '1' mano rodillo		- Venier requiere '2' manos con pincel y '1' con rodillo	"	algoFix registrarPintorDePincel: 'Edson' conValorHora: 500.	algoFix registrarPintorDeRodillo: 'Edson' conValorHora: 200.	algoFix registrarPintorDeRodillo: 'Pablo' conValorHora: 800.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1.	venier := algoFix crearPintura: 'Venier' conPrecioPorLitro: 150 manosPincel: 2 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperadoConAlba := algoFix 		manoDeObra: 			(5 "M2" * 1 "horas" * 200 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 5 "litros" * 200 "Precio" * 1 "manos").	self assert: 'Edson' equals: (presupuesto responsable).	self assert: valorEsperadoConAlba closeTo: (presupuesto valor) precision: precision.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: venier.	valorEsperadoConVenier := algoFix 		manoDeObra: 			(5 "M2" * 1 "horas" * 200 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 5 "litros" * 150 "Precio" * 1 "manos").	self assert: 'Edson' equals: (presupuesto responsable).	self assert: valorEsperadoConVenier closeTo: (presupuesto valor) precision: precision.! !TestCase subclass: #AlgoFixTest	instanceVariableNames: 'unaPintura algofix'	classVariableNames: ''	package: 'TP1-Tests'!!AlgoFixTest methodsFor: 'running' stamp: 'val 5/27/2020 04:13'!setUp	algofix := AlgoFix new.	! !!AlgoFixTest methodsFor: 'tests' stamp: 'val 5/27/2020 03:29'!test01UnaManoDeObraYUnosMaterialesDevuelvenElPresupuestoCorrecto	| unResultado |	unResultado := algofix manoDeObra: 79 masMateriales: 8000. 		self assert: unResultado equals: (79 + 8000).! !!AlgoFixTest methodsFor: 'tests' stamp: 'val 5/27/2020 03:57'!test02RegistroPintorDePincelYPintorDeRodilloYElMasEconomicoEsPedro	| celeste unPresupuesto unResultado |	algofix := AlgoFix new.		celeste := algofix crearPintura: 'Celeste' conPrecioPorLitro: 500 manosPincel: 10 manosRodillo: 7.	algofix registrarPintorDePincel: 'fulano' conValorHora: 5800.	algofix registrarPintorDeRodillo: 'mengano' conValorHora: 250.		unPresupuesto :=	algofix presupuestoMasBaratoParaPintarMetrosCuadrados: 80 conPintura: celeste.	"el mas economico deberia ser mengano"	unResultado := algofix manoDeObra: (80"metros" * 250"precio" * 7"manos" * 1"hs") masMateriales: (80"metros" * 5"litros" * 7"manos" * 500"precio").	self assert: (unPresupuesto responsable) equals: 'mengano'.	self assert: unResultado equals: (unPresupuesto valor).! !!AlgoFixTest methodsFor: 'tests' stamp: 'val 5/27/2020 04:05'!test03PintorPincelCon39MetrosDeberiaSerMasEconomicoQueOtroPintorPincelConDescuentoPor41Metros	| celeste unResultado otroResultado |	algofix := AlgoFix new.		celeste := algofix crearPintura: 'Celeste' conPrecioPorLitro: 100 manosPincel: 10 manosRodillo: 7.	algofix registrarPintorDePincel: 'fulano' conValorHora: 500.	algofix registrarPintorDePincel: 'mengano' conValorHora: 500.		"precio para fulano"	unResultado := algofix manoDeObra: (39"metros" * 500"precio" * 10"manos" * 2"hs") masMateriales: (39"metros" * 4"litros" * 10"manos" * 100"precio").	"precio para mengano"	otroResultado := algofix manoDeObra: (41"metros" * 500"precio" * 10"manos" * 2"hs") masMateriales: (41"metros" * 4"litros" * 10"manos" * 100"precio").		self assert: (unResultado < otroResultado). ! !TestCase subclass: #PintorTest	instanceVariableNames: 'unaTecnica otraTecnica unaPintura'	classVariableNames: ''	package: 'TP1-Tests'!!PintorTest methodsFor: 'running' stamp: 'valen 5/22/2020 05:27'!setUp	unaTecnica := TecnicaPincel new.	otraTecnica := TecnicaRodillo new.	unaPintura := Pintura conNombre: 'roja' yPrecio: 2060 yManosPincel: 2 yManosRodillo: 4.! !!PintorTest methodsFor: 'tests' stamp: 'val 5/28/2020 02:47'!test03PintorDeRodilloConNombreNilDeberiaLanzarExcepcion	self should: [ Pintor conNombre: nil yValor: 6000 yTecnica: otraTecnica ] raise: NoSePuedeRegistrarPintorSinNombre.! !!PintorTest methodsFor: 'tests' stamp: 'val 5/28/2020 02:47'!test01CreoUnPintorDePincelYConPinturaRojaPara50MetrosSuPresupuestoEsCorrecto	| unPintor resultado |		unPintor := Pintor conNombre: 'fulano' yValor: 5000 yTecnica: unaTecnica.		resultado := unPintor presupuestoManoDeObraParaMetros: 50 conPintura: unaPintura.		self assert: resultado equals: (50 "metros" * 2 "horas pincel" * 5000 "precio pintor" * 2 "manos de la tecnica" * 0.5"descuento").! !!PintorTest methodsFor: 'tests' stamp: 'val 5/28/2020 02:48'!test04PintorDePincelConNombreNilDeberiaLanzarExcepcion	self should: [ Pintor conNombre: nil yValor: 50 yTecnica: unaTecnica ] raise: NoSePuedeRegistrarPintorSinNombre.! !!PintorTest methodsFor: 'tests' stamp: 'val 5/28/2020 02:47'!test02CreoUnPintorDeRodilloYConPinturaRojaPara5550MetrosSuPresupuestoEsCorrecto	| unPintor resultado |		unPintor := Pintor conNombre: 'fulano' yValor: 10 yTecnica: otraTecnica.		resultado := unPintor presupuestoManoDeObraParaMetros: 5550 conPintura: unaPintura.		self assert: resultado equals: (5550 "metros" * 1 "horas rodillo" * 10 "precio pintor" * 4 "manos de la tecnica").! !TestCase subclass: #PinturaTest	instanceVariableNames: 'unPintor'	classVariableNames: ''	package: 'TP1-Tests'!!PinturaTest methodsFor: 'running' stamp: 'val 5/28/2020 03:02'!setUp	unPintor := Pintor conNombre: 'pepe' yValor: 2 yTecnica: TecnicaPincel new.! !!PinturaTest methodsFor: 'tests' stamp: 'val 5/28/2020 02:49'!test04PinturaConNombreNilDeberiaLanzarExcepcion		self should: [ Pintura conNombre: nil yPrecio: 100 yManosPincel: 6 yManosRodillo: 5 ] raise: NoSeRegistroNombrePintura.	! !!PinturaTest methodsFor: 'tests' stamp: 'val 5/28/2020 02:50'!test01creoUnaPinturaRojaYSuPrecioEsElQueDeberia	| pinturaRoja resultado |		pinturaRoja := Pintura conNombre: 'roja' yPrecio: 2060 yManosPincel: 2 yManosRodillo: 4.		resultado := pinturaRoja precio.		self assert: resultado equals: 2060.! !!PinturaTest methodsFor: 'tests' stamp: 'val 5/28/2020 03:02'!test03calculoElPresupuestoDeMaterialesPara67MetrosConPintorDePincelYElResultadoEsCorrecto	| unaPintura resultado |		unaPintura := Pintura conNombre: 'verde' yPrecio: 100 yManosPincel: 6 yManosRodillo: 5.	resultado := unaPintura calcularPrecioMaterialesDe: unPintor paraMetros: 17.		self assert: resultado equals: (17 "metros" * 4 "litros para pincel" * 100 "precio pintura" * 6 "manos de la tecnica").! !!PinturaTest methodsFor: 'tests' stamp: 'val 5/28/2020 02:49'!test02creoUnaPinturaRojaYEsMasCaraQueLaCeleste	| pinturaRoja pinturaCeleste resultado |		pinturaRoja := Pintura conNombre: 'roja' yPrecio: 2060 yManosPincel: 2 yManosRodillo: 4.	pinturaCeleste := Pintura conNombre: 'celeste' yPrecio: 50 yManosPincel: 5 yManosRodillo: 1.		resultado := (pinturaCeleste precio) < (pinturaRoja precio).		self assert: resultado.! !TestCase subclass: #PresupuestoTest	instanceVariableNames: 'unaPintura unPintor otroPintor unPresupuesto'	classVariableNames: ''	package: 'TP1-Tests'!!PresupuestoTest methodsFor: 'running' stamp: 'val 5/27/2020 03:25'!setUp	unPresupuesto := Presupuesto new. 	unaPintura := Pintura conNombre: 'roja' yPrecio: 2060 yManosPincel: 2 yManosRodillo: 4.	unPintor := Pintor conNombre: 'pepe' yValor: 2 yTecnica: TecnicaPincel new.	otroPintor := Pintor conNombre: 'pepito jr' yValor: 80 yTecnica: TecnicaRodillo new.! !!PresupuestoTest methodsFor: 'tests' stamp: 'Val 5/24/2020 00:41'!test01LosGastosParaLaPinturaRojaConPintorDePincel	| resultado |		resultado := unPresupuesto contabilizarGastosPara: unPintor conMetros: 30 yPintura: unaPintura.		self assert: resultado equals: (30"metros" * 2"hs" * 2"precio pintor" * 2"manos") + (30"metros" * 4"litros" * 2060"precio" * 2"manos").! !!PresupuestoTest methodsFor: 'tests' stamp: 'val 5/27/2020 03:14'!test04ElPintorMasEconomicoDeNingunPintorDeberiaLanzarExcepcion	self should: [ unPresupuesto pintorMasEconomicoDePintores: (OrderedCollection new) paraMetros: 500 conPintura: unaPintura ] raise: NoSeRegistraronPintores.		! !!PresupuestoTest methodsFor: 'tests' stamp: 'val 5/27/2020 03:17'!test05ElPintorMasEconomicoConPinturaNilDeberiaLargarExcepcion	| unosPintores |		unosPintores := OrderedCollection new.	unosPintores add: unPintor. 	self should: [ unPresupuesto pintorMasEconomicoDePintores: unosPintores paraMetros: 500 conPintura: nil ] raise: NoHayPinturaParaCalcularPresupuesto.		! !!PresupuestoTest methodsFor: 'tests' stamp: 'val 5/27/2020 03:25'!test07LosGastosParaLaPinturaRojaConPintorDePincelTienenElValorDePepe	| unosPintores unResultado |		unosPintores := OrderedCollection new.	unosPintores add: unPintor. 		unPresupuesto pintorMasEconomicoDePintores: unosPintores paraMetros: 37 conPintura: unaPintura.	unResultado := unPresupuesto valor.		self assert: unResultado equals: (37"metros" * 2"hs" * 2"precio pintor" * 2"manos") + (37"metros" * 4"litros" * 2060"precio" * 2"manos").! !!PresupuestoTest methodsFor: 'tests' stamp: 'val 5/27/2020 03:26'!test06LosGastosParaLaPinturaRojaConPintorDePincelTienenDeResponsableAPepe	| unosPintores unResultado |		unosPintores := OrderedCollection new.	unosPintores add: unPintor. 		unPresupuesto pintorMasEconomicoDePintores: unosPintores paraMetros: 37 conPintura: unaPintura.	unResultado := unPresupuesto responsable.		self assert: unResultado equals: 'pepe'.! !!PresupuestoTest methodsFor: 'tests' stamp: 'val 5/27/2020 03:11'!test03ElPintorMasEconomicoDeUnosPintoresNilDeberiaLanzarExcepcion	self should: [ unPresupuesto pintorMasEconomicoDePintores: nil paraMetros: 500 conPintura: unaPintura ] raise: NoSeEnvioUnPunteroDePintores.		! !!PresupuestoTest methodsFor: 'tests' stamp: 'Val 5/24/2020 00:42'!test02LosGastosParaLaPinturaRojaConPintorDeRodilloSonCorrectos	| resultado |		resultado := unPresupuesto contabilizarGastosPara: otroPintor conMetros: 30 yPintura: unaPintura.		self assert: resultado equals: (30"metros" * 1"hs" * 80"precio pintor" * 4"manos") + (30"metros" * 5"litros" * 2060"precio" * 4"manos").! !TestCase subclass: #TecnicaPincelTest	instanceVariableNames: 'unaPintura'	classVariableNames: ''	package: 'TP1-Tests'!!TecnicaPincelTest methodsFor: 'running' stamp: 'valen 5/22/2020 05:37'!setUp	unaPintura := Pintura conNombre: 'verde' yPrecio: 1000 yManosPincel: 2 yManosRodillo: 5.! !!TecnicaPincelTest methodsFor: 'tests' stamp: 'valen 5/22/2020 05:40'!test01DadaUnaPinturaDevuelveLas2ManosRequeridasPorLaTecnicaPincel	| unaTecnica resultado |		unaTecnica := TecnicaPincel new.	resultado := unaTecnica manosNecesariasConPintura: unaPintura.		self	assert: resultado equals: 2.	 	! !!TecnicaPincelTest methodsFor: 'tests' stamp: 'valen 5/22/2020 06:24'!test03LosLitrosDeLaTecnicaPincelSon4	| unaTecnica resultado |		unaTecnica := TecnicaPincel new.	resultado := unaTecnica litrosTecnica. 		self	assert: resultado equals: 4.	 	! !!TecnicaPincelTest methodsFor: 'tests' stamp: 'valen 5/22/2020 05:41'!test02LaDuracionPorLaTecnicaPincelEs2	| unaTecnica resultado |		unaTecnica := TecnicaPincel new.	resultado := unaTecnica duracion. 		self	assert: resultado equals: 2.	 	! !TestCase subclass: #TecnicaRodilloTest	instanceVariableNames: 'unaPintura'	classVariableNames: ''	package: 'TP1-Tests'!!TecnicaRodilloTest methodsFor: 'running' stamp: 'valen 5/22/2020 05:43'!setUp	unaPintura := Pintura conNombre: 'violeta' yPrecio: 200 yManosPincel: 6 yManosRodillo: 3.! !!TecnicaRodilloTest methodsFor: 'tests' stamp: 'val 5/23/2020 00:56'!test02LaDuracionPorLaTecnicaRodilloEs1	| unaTecnica resultado |		unaTecnica := TecnicaRodillo new.	resultado := unaTecnica duracion. 		self	assert: resultado equals: 1.	 	! !!TecnicaRodilloTest methodsFor: 'tests' stamp: 'valen 5/22/2020 05:43'!test01DadaUnaPinturaDevuelveLas3ManosRequeridasPorLaTecnicaRodillo	| unaTecnica resultado |		unaTecnica := TecnicaRodillo new.	resultado := unaTecnica manosNecesariasConPintura: unaPintura.		self	assert: resultado equals: 3.	 ! !!TecnicaRodilloTest methodsFor: 'tests' stamp: 'valen 5/22/2020 06:25'!test03LosLitrosDeLaTecnicaRodilloSon5	| unaTecnica resultado |		unaTecnica := TecnicaRodillo new.	resultado := unaTecnica litrosTecnica. 		self	assert: resultado equals: 5.! !